// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid())
    email String? @unique @db.VarChar(255)
    name String? @db.VarChar(255)
    hashedPassword String? @db.VarChar(255)
    emailVerified Boolean?
    image String?

    conversations Conversation[] @relation("users")
    seenMessages Message[] @relation("seen")

    sessions Session[]
    accounts Account[]
    messages Message[] @relation("sender")

    createdAt DateTime @default(now())
    @@index([email])
}

model Account {
  id String @id @default(cuid()) @map("_id")
  provider String?
  type String?
  providerAccountId String?
  access_token String? @db.Text
  expires_at Int?
  scope String?
  token_type String?
  refresh_token String? @db.Text
  type_Provider String?
  id_token String? @db.Text
  session_state String?
  userId String
  image String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())
  body String @db.Text
  image String?

  seen User[] @relation("seen")

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  conversationId String
  convertations Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender User @relation("sender", fields: [senderId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Conversation {
  id String @id
  name String? @default("Unknown") @db.VarChar(255)
  isGroup Boolean? @default(false)
  image String? @db.Text

  lastMessageAt DateTime @default(now())
  createdAt DateTime @default(now())

  users User[] @relation("users")
  messages Message[]
}

// Model connect seen messages from users

// model UserSeenMessage {
//   id String @id
//   userId String
//   messageId String

//   user User @relation(fields: [userId], references: [id])
//   message Message @relation(fields: [messageId], references: [id])
// }